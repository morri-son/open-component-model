name: Publish Helm Input Plugin Component

on:
  push:
    branches:
      - main
    paths:
      - 'bindings/go/helm/**'
    tags:
      - 'bindings/go/helm/v*'
  workflow_dispatch:
    inputs:
      version:
        description: "Component version, e.g., 0.0.1 or 0.0.1-alpha1. Must match existing bindings/go/helm/vX.Y.Z[-suffix] tag without the 'v'. If not set, 'main' is used."
        required: false
        type: string
        default: "main"
      # Add possible inputs for OCM repository and CLI image to be able to test with different repos/images
      ocm_repository:
        description: "OCM repository to publish the plugin component to. Default is ghcr.io/open-component-model/plugins"
        required: false
        type: string
        default: "ghcr.io/open-component-model/plugins"
      ocm_image:
        description: "OCM CLI image to use for publishing. Default is ghcr.io/open-component-model/cli:main"
        required: false
        type: string
        default: "ghcr.io/open-component-model/cli:main"

jobs:
  build_publish:
    name: Build and Publish Plugin Component
    runs-on: ubuntu-latest
    concurrency:
      group: helm-plugin-publish-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version from input
        id: version_input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          set -euo pipefail
          if [ "${{ github.event.inputs.version }}" == "main" ]; then
            VERSION="main"
          else          
            VERSION="${{ github.event.inputs.version }}"
            # SemVer (Major.Minor.Patch + optional -suffix)
            if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9._-]+)?$ ]]; then
              echo "❌ Invalid version format: $VERSION"
              exit 1
            fi
            TAG="bindings/go/helm/v$VERSION"
            # Check if tag exists
            if ! git ls-remote --tags origin "refs/tags/$TAG" | grep -q "refs/tags/$TAG$"; then
              echo "❌ Tag $TAG does not exist in the repository."
              exit 1
            fi
          fi

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "✅ VERSION resolved to: $VERSION"

      - name: Determine version based on ref
        if: ${{ github.event_name != 'workflow_dispatch' }}
        id: version
        run: |
          set -euo pipefail
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            VERSION="main"
          elif [[ "$GITHUB_REF" == refs/tags/bindings/go/helm/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/bindings/go/helm/v}"
          else
            echo "Unsupported ref: $GITHUB_REF"
            exit 1
          fi

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "✅ VERSION resolved from $GITHUB_REF to: $VERSION"

      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version-file: bindings/go/helm/go.mod
          cache-dependency-path: bindings/go/helm/go.sum

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Build multi-arch binaries and generate component constructor
        working-directory: bindings/go/helm
        env:
          VERSION: ${{ env.VERSION }}
        shell: bash
        run: |
          set -euo pipefail
          task tmp
          task build:matrix
          task generate/component-constructor
          test -f "./tmp/component-constructor.yaml" || (echo "component-constructor.yaml not found" && exit 1)

      - name: Create Docker config.json for GHCR
        run: |
          mkdir -p $HOME/.docker
          echo "{\"auths\": {\"ghcr.io\": {\"auth\": \"$(echo -n "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" | base64)\"}}}" > $HOME/.docker/config.json

      # Generate OCM config that can be used in the container
      - name: Generate OCM config
        shell: bash
        run: |
          set -euo pipefail

          cat > ${HOME}/.ocmconfig <<EOF
          type: generic.config.ocm.software/v1
          configurations:
            - type: credentials.config.ocm.software
              repositories:
                - repository:
                    type: DockerConfig/v1
                    dockerConfigFile: /.docker/config.json
                    propagateConsumerIdentity: true
          EOF

          echo "Created ${HOME}/.ocmconfig:"
          cat ${HOME}/.ocmconfig

      # Publish component version using CLI image
      - name: Publish OCM Component Version
        env:
          OCM_REPOSITORY: ${{ github.event.inputs.ocm_repository || 'ghcr.io/open-component-model/plugins' }}
          CLI_IMAGE: ${{ github.event.inputs.ocm_image || 'ghcr.io/open-component-model/cli:main' }}
          WORKDIR: ${{ github.workspace }}/bindings/go/helm/tmp
        shell: bash
        run: |
          set -euo pipefail

          PUBLISH_POLICY_ARGS=""
          if [ "${VERSION}" = "main" ]; then
            PUBLISH_POLICY_ARGS="--component-version-conflict-policy replace"
            echo "Publishing component version from 'main' branch (replace policy)"
          else
            echo "Publishing component version for tag bindings/go/helm/'${VERSION}'"
          fi

          docker run --rm \
            -v "${HOME}/.docker/config.json:/.docker/config.json:ro" \
            -v "${HOME}/.ocmconfig:ro" \
            -v /etc/ssl/certs/:/etc/ssl/certs/:ro \
            -v "$WORKDIR:$WORKDIR" \
            -w "$WORKDIR" \
            "$CLI_IMAGE" \
              add component-version \
              --config "$WORKDIR/.ocmconfig" \
              --repository "$OCM_REPOSITORY" \
              --constructor "./component-constructor.yaml" \
              --loglevel debug ${PUBLISH_POLICY_ARGS} 

      - name: Summary
        shell: bash
        run: |
          echo "## Published Helm input plugin component version" >> "$GITHUB_STEP_SUMMARY"
          echo "- OCM Repository: ${{ github.event.inputs.ocm_repository }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Version: ${{ env.VERSION }}" >> "$GITHUB_STEP_SUMMARY"
