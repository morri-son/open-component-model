name: Publish Helm Input Plugin Component

on:
  push:
    branches:
      - main
    paths:
      - 'bindings/go/helm/**'
      - '.github/workflows/publish-helminput-plugin-component.yaml'
    tags:
      - 'bindings/go/helm/v*'
  pull_request:
    branches:
      - main
    paths:
      - 'bindings/go/helm/**'
      - '.github/workflows/publish-helminput-plugin-component.yaml'
  workflow_call:
    inputs:
      ref:
        description: "The ref to build on (branch or tag). Defaults to the current ref."
        type: string
        required: false

env:
  # Repository selection for checkout:
  # - pull_request: Use head repository (fork) for PR changes
  # - other events: Use current repository
  CHECKOUT_REPO: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

  # REF determination:
  # - inputs.ref: Explicit override for workflow_call
  # - pull_request: Use github.head_ref (PR source branch from fork)
  # - push/tag: Use github.ref_name (branch or tag name)
  REF: ${{ inputs.ref || (github.event_name == 'pull_request' && github.head_ref) || github.ref_name }}

jobs:
  build:
    name: Build Plugin Component
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.publish-check.outputs.should_publish }}
      version: ${{ steps.calculate_version.outputs.version }}
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ env.REF }}
          repository: ${{ env.CHECKOUT_REPO }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute VERSION
        id: calculate_version
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        env:
          TAG_PREFIX: "bindings/go/helm/v"
        with:
          script: |
            const script = await import('${{ github.workspace }}/.github/scripts/compute-version.js');
            await script.default({ core });

      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version-file: bindings/go/helm/go.mod
          cache-dependency-path: bindings/go/helm/go.sum

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Build multi-arch binaries and generate component constructor
        working-directory: bindings/go/helm
        env:
          VERSION: ${{ steps.calculate_version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Generating component constructor with version: $VERSION"
          task generate/component-constructor
          test -f "./tmp/component-constructor.yaml" || (echo "component-constructor.yaml not found" && exit 1)

      - name: Attest binaries
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/attest-build-provenance@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          subject-path: "bindings/go/helm/tmp/bin/*"

      - name: Upload build artifacts
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 #v5
        with:
          name: helm-plugin-build-artifacts
          path: bindings/go/helm/tmp/
          retention-days: 1

  publish:
    name: Publish Component
    needs: build
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    concurrency:
      group: helm-plugin-publish-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 #v6
        with:
          name: helm-plugin-build-artifacts
          path: bindings/go/helm/tmp/

      - name: Verify artifacts
        run: |
          echo "✅ Verifying build artifacts..."
          ls -la bindings/go/helm/tmp/
          test -f bindings/go/helm/tmp/component-constructor.yaml || (echo "❌ component-constructor.yaml missing" && exit 1)
          test -d bindings/go/helm/tmp/bin || (echo "❌ bin directory missing" && exit 1)
          echo "✅ All required artifacts present"

      - name: Create Docker config.json for GHCR
        run: |
          mkdir -p ${HOME}/.docker
          echo "{\"auths\": {\"ghcr.io\": {\"auth\": \"$(echo -n "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" | base64)\"}}}" > ${HOME}/.docker/config.json

      # Generate OCM config that can be used in the container
      - name: Generate OCM config
        shell: bash
        run: |
          set -euo pipefail

          cat > ${HOME}/.ocmconfig <<EOF
          type: generic.config.ocm.software/v1
          configurations:
            - type: credentials.config.ocm.software
              repositories:
                - repository:
                    type: DockerConfig/v1
                    dockerConfigFile: /.docker/config.json
                    propagateConsumerIdentity: true
          EOF

          echo "Created ${HOME}/.ocmconfig:"
          cat ${HOME}/.ocmconfig

      # Publish component version using CLI image
      # TODO: replace with github action workflow call so it runs in a container.
      - name: Publish OCM Component Version
        env:
          VERSION: ${{ needs.build.outputs.version }}
          OCM_REPOSITORY: ghcr.io/${{ github.repository_owner }}/plugins
          CLI_IMAGE: ghcr.io/open-component-model/cli:main
          WORKDIR: ${{ github.workspace }}/bindings/go/helm/tmp
        shell: bash
        run: |
          set -euo pipefail

          docker run --rm \
            -v "${HOME}/.docker/config.json:/.docker/config.json:ro" \
            -v "${HOME}/.ocmconfig:/.ocmconfig:ro" \
            -v /etc/ssl/certs/:/etc/ssl/certs/:ro \
            -v "${WORKDIR}:${WORKDIR}" \
            -w "${WORKDIR}" \
            "$CLI_IMAGE" \
              add component-version \
              --config "/.ocmconfig" \
              --repository "${OCM_REPOSITORY}" \
              --constructor "./component-constructor.yaml"

      # Verify that the plugin exists.
      - name: Verify uploaded plugin.
        env:
          VERSION: ${{ needs.build.outputs.version }}
          OCM_REPOSITORY: ghcr.io/${{ github.repository_owner }}/plugins
          CLI_IMAGE: ghcr.io/open-component-model/cli:main
          WORKDIR: ${{ github.workspace }}/bindings/go/helm/tmp
        shell: bash
        run: |
          set -euo pipefail

          docker run --rm \
            -v "${HOME}/.docker/config.json:/.docker/config.json:ro" \
            -v "${HOME}/.ocmconfig:/.ocmconfig:ro" \
            -v /etc/ssl/certs/:/etc/ssl/certs/:ro \
            -v "${WORKDIR}:${WORKDIR}" \
            -w "${WORKDIR}" \
            "$CLI_IMAGE" \
              download plugin \
              ${OCM_REPOSITORY}//ocm.software/plugins/helminput:${VERSION} \
              --output /tmp/plugin \
              --config "/.ocmconfig" \
              --resource-name binary

      - name: Summary
        env:
          VERSION: ${{ needs.build.outputs.version }}
          OCM_REPOSITORY: ${{ github.event.inputs.ocm_repository || 'ghcr.io/open-component-model/plugins' }}
        shell: bash
        run: |
          echo "## Published Helm input plugin component version" >> "$GITHUB_STEP_SUMMARY"
          echo "- OCM Repository: ${OCM_REPOSITORY}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Component Name: ocm.software/plugins/helminput" >> "$GITHUB_STEP_SUMMARY"
          echo "- Component Version: ${VERSION}" >> "$GITHUB_STEP_SUMMARY"

      - name: Cleanup
        if: always()
        run: |
          rm ${HOME}/.docker/config.json || true